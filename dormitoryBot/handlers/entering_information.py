from aiogram import Router, F, Bot, html
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from settings import CHANNEL_ID
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from keyboards.callbacks import RegistrationCallback

from filters.exists_filter import ExistsFilter
from filters.registration_status_filter import Registration
from filters.registration_input import RegistrationInput

from sqlite3 import Cursor


router = Router()



@router.callback_query(RegistrationCallback.filter())
async def accept_registration(callback: CallbackQuery, bot: Bot, state: FSMContext, cursor: Cursor, callback_data: RegistrationCallback):
    # await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (callback.from_user.id,))
    user = cursor.fetchone()
    first_name = user[1]
    last_name = user[2]
    surname = user[3]
    floor = user[4]
    room = user[5]
    role = user[6]
    await bot.send_message(CHANNEL_ID, f"üìù {html.bold(role)} | {first_name} {last_name} | –ù–∞—á–∞–ª(–∞) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await bot.send_message(callback.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–ò–º—è</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    data = await state.get_data()
    data["registration_user_id"] = callback_data.user_id
    data["registration_input_state"] = "first_name"
    await state.set_data(data)


# –í–≤–µ–ª–∏ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RegistrationInput("first_name"))
async def enter_first_name(message: Message, state: FSMContext):


    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


    data = await state.get_data()
    data["registration_user_first_name"] = message.text
    data["registration_input_state"] = "last_name"
    await state.set_data(data)


# –í–≤–µ–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RegistrationInput("last_name"))
async def enter_last_name(message: Message, state: FSMContext):


    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–û—Ç—á–µ—Å—Ç–≤–æ</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


    data = await state.get_data()
    data["registration_user_last_name"] = message.text
    data["registration_input_state"] = "surname"
    await state.set_data(data)


# –í–≤–µ–ª–∏ –û—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RegistrationInput("surname"))
async def enter_surname(message: Message, state: FSMContext):


    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–≠—Ç–∞–∂</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


    data = await state.get_data()
    data["registration_user_surname"] = message.text
    data["registration_input_state"] = "floor"
    await state.set_data(data)


# –í–≤–µ–ª–∏ –≠—Ç–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RegistrationInput("floor"))
async def enter_floor(message: Message, state: FSMContext):


    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–ö–æ–º–Ω–∞—Ç—É</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


    data = await state.get_data()
    data["registration_user_floor"] = message.text
    data["registration_input_state"] = "room"
    await state.set_data(data)


# –í–≤–µ–ª–∏ –ö–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RegistrationInput("room"))
async def enter_room(message: Message, state: FSMContext):

    buttons = [
        [
            InlineKeyboardButton(text="üßΩ –î–µ–∂—É—Ä–Ω—ã–π", callback_data='–î–µ–∂—É—Ä–Ω—ã–π'),
            InlineKeyboardButton(text="üõ° –û–ø–µ—Ä", callback_data='–û–ø–µ—Ä'),
            InlineKeyboardButton(text="üóù –°—Ç–∞—Ä–æ—Å—Ç–∞", callback_data='–°—Ç–∞—Ä–æ—Å—Ç–∞'),
        ],
        [
            InlineKeyboardButton(text="üîí –ê–¥–º–∏–Ω", callback_data='–ê–¥–º–∏–Ω'),
            InlineKeyboardButton(text="üîê –ì–ª. –ê–¥–º–∏–Ω", callback_data='–ì–ª. –ê–¥–º–∏–Ω')
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    data = await state.get_data()
    data["registration_user_room"] = message.text
    data["registration_input_state"] = "role"
    # data.pop("registration_input_state")
    await state.set_data(data)


@router.callback_query()
async def enter_role(callback: CallbackQuery, state: FSMContext, cursor: Cursor):
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (callback.from_user.id,))
    user = cursor.fetchone()
    role = user[6]

    data = await state.get_data()

    first_name = data["registration_user_first_name"]
    last_name = data["registration_user_last_name"]
    surname = data["registration_user_surname"]
    floor = data["registration_user_floor"]
    room = data["registration_user_room"]
    role = callback.data




    if callback.data == "–î–µ–∂—É—Ä–Ω—ã–π" and role in ["–°—Ç–∞—Ä–æ—Å—Ç–∞", "–ì–ª. –ê–¥–º–∏–Ω"]:
        data["registration_user_role"] = callback.data
        data["registration_input_state"] = "correct"

        await callback.message.edit_reply_markup(reply_markup=None)

        await callback.message.answer(f'üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n<pre>–§–ò–û: {first_name} {last_name} {surname}\n–≠—Ç–∞–∂: {floor}\n–ö–æ–º–Ω–∞—Ç–∞: {room}\n–†–æ–ª—å: {role}</pre>')

    elif callback.data == "–î–µ–∂—É—Ä–Ω—ã–π" and role not in ["–°—Ç–∞—Ä–æ—Å—Ç–∞", "–ì–ª. –ê–¥–º–∏–Ω"]:
        await callback.answer(show_alert=True, text="üîê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


    elif callback.data == "–û–ø–µ—Ä" and role == "–ì–ª. –ê–¥–º–∏–Ω":
        data["registration_user_role"] = callback.data
        data["registration_input_state"] = "correct"

        await callback.message.edit_reply_markup(reply_markup=None)

        await callback.message.answer(f'üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n<pre>–§–ò–û: {first_name} {last_name} {surname}\n–≠—Ç–∞–∂: {floor}\n–ö–æ–º–Ω–∞—Ç–∞: {room}\n–†–æ–ª—å: {role}</pre>')

    elif callback.data == "–û–ø–µ—Ä" and role != "–ì–ª. –ê–¥–º–∏–Ω":
        await callback.answer(show_alert=True, text="üîê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


    elif callback.data == "–°—Ç–∞—Ä–æ—Å—Ç–∞" and role == "–ì–ª. –ê–¥–º–∏–Ω":
        data["registration_user_role"] = callback.data
        data["registration_input_state"] = "correct"

        await callback.message.edit_reply_markup(reply_markup=None)

        await callback.message.answer(f'üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n<pre>–§–ò–û: {first_name} {last_name} {surname}\n–≠—Ç–∞–∂: {floor}\n–ö–æ–º–Ω–∞—Ç–∞: {room}\n–†–æ–ª—å: {role}</pre>')

    elif callback.data == "–°—Ç–∞—Ä–æ—Å—Ç–∞" and role != "–ì–ª. –ê–¥–º–∏–Ω":
        await callback.answer(show_alert=True, text="üîê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


    elif callback.data == "–ê–¥–º–∏–Ω" and role == "–ì–ª. –ê–¥–º–∏–Ω":
        data["registration_user_role"] = callback.data
        data["registration_input_state"] = "correct"

        await callback.message.edit_reply_markup(reply_markup=None)

        await callback.message.answer(f'üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n<pre>–§–ò–û: {first_name} {last_name} {surname}\n–≠—Ç–∞–∂: {floor}\n–ö–æ–º–Ω–∞—Ç–∞: {room}\n–†–æ–ª—å: {role}</pre>')

    elif callback.data == "–ê–¥–º–∏–Ω" and role != "–ì–ª. –ê–¥–º–∏–Ω":
        await callback.answer(show_alert=True, text="üîê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


    elif callback.data == "–ì–ª. –ê–¥–º–∏–Ω" and role == "–ì–ª. –ê–¥–º–∏–Ω":
        data["registration_user_role"] = callback.data
        data["registration_input_state"] = "correct"

        await callback.message.edit_reply_markup(reply_markup=None)

        await callback.message.answer(f'üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n<pre>–§–ò–û: {first_name} {last_name} {surname}\n–≠—Ç–∞–∂: {floor}\n–ö–æ–º–Ω–∞—Ç–∞: {room}\n–†–æ–ª—å: {role}</pre>')

    elif callback.data == "–ì–ª. –ê–¥–º–∏–Ω" and role != "–ì–ª. –ê–¥–º–∏–Ω":
        await callback.answer(show_alert=True, text="üîê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    await state.set_data(data)